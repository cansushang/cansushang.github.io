<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小野解词 词根词缀</title>
      <link href="2021/01/07/%E5%B0%8F%E9%87%8E%E8%A7%A3%E8%AF%8D-%E8%AF%8D%E6%A0%B9%E8%AF%8D%E7%BC%80/"/>
      <url>2021/01/07/%E5%B0%8F%E9%87%8E%E8%A7%A3%E8%AF%8D-%E8%AF%8D%E6%A0%B9%E8%AF%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h1 id="小野解词-词根词缀"><a href="#小野解词-词根词缀" class="headerlink" title="小野解词 词根词缀"></a>小野解词 词根词缀</h1><p><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/xiaoyejieci/2.png"></p><h3 id="ball-球；圆"><a href="#ball-球；圆" class="headerlink" title="ball = 球；圆"></a>ball = 球；圆</h3><ul><li>ball 球</li><li>ballot 选票；投票否决<ul><li>古代投票：圆的小石头，小纸条</li></ul></li><li>bald 秃头的<ul><li>头是圆的</li></ul></li><li>belly 肚子；腹部<ul><li>肚子是圆的</li></ul></li><li>bullet 子弹<ul><li>古代子弹：圆的小钢珠</li></ul></li><li>bulb 电灯泡；球茎<ul><li>形状都是圆的</li></ul></li><li>bulk 大块头；大部分</li></ul><h3 id="und-wave-海浪-plenty-大量"><a href="#und-wave-海浪-plenty-大量" class="headerlink" title="und = wave 海浪, plenty 大量"></a>und = wave 海浪, plenty 大量</h3><ul><li>abundant 丰富的；充裕的<ul><li>ab-: 强调；加强语气</li><li>und: wave</li><li>-ant: 形容词</li></ul></li><li>abundance 丰富；充裕</li><li>abound v. 非常多；大量存在</li><li>redundant 冗余的<ul><li>re(d)-: back 向后；退</li><li>因为太多所以退回来了</li></ul></li><li>undulate 波动;起伏;呈波浪形<ul><li>und: wave</li><li>-ate: v. 动词</li></ul></li><li>inundate v. 泛滥;淹没<ul><li>in-: 在里面</li><li>在海浪里面 = 淹没</li><li>引申含义: 事情太多-难以胜任</li></ul></li><li>inundation n. 泛滥;淹没</li></ul><h3 id="cord-heart-心"><a href="#cord-heart-心" class="headerlink" title="cord = heart 心"></a>cord = heart 心</h3><ul><li>core 果核;核心</li><li>cordial 诚恳的;热诚的;亲切的;友好的<ul><li>发自内心的</li></ul></li><li>concord n. 和谐;一致;和睦<ul><li>con-: together</li><li>心连心</li></ul></li><li>discord n. 不和;纷争<ul><li>dis-: not</li><li>心与心不在一起</li></ul></li><li>accord n.和平条约;协议<ul><li>ad-: to 朝着(ad后接c则改为ac)</li><li>谈判双方心朝着心互相提出要求和让步达成协议</li><li>in accordance with: 按照…</li><li>according to: 据…所说</li><li>accordingly: 相应地</li></ul></li><li>cardinal 最重要的;主要的;基本的<ul><li>card: heart</li><li>-al: 形容词</li><li>容易与cordial(诚挚的)混淆</li></ul></li><li>cardiologist 心脏病学家;心脏病医生<ul><li>-logy: 学科</li><li>-ist: 学家</li></ul></li></ul><h3 id="optim-best-最优的"><a href="#optim-best-最优的" class="headerlink" title="optim = best 最优的"></a>optim = best 最优的</h3><ul><li>optimism 乐观主义<ul><li>-ism: n. 主义</li><li>optimistic: 乐观的</li><li>optimist: 乐观主义者</li><li>pessimism: 悲观主义</li></ul></li></ul><h3 id="ally-联合"><a href="#ally-联合" class="headerlink" title="ally = 联合"></a>ally = 联合</h3><ul><li>ally 同盟国;与…结盟<ul><li>alliance: 联盟</li><li>alloy: 合金 (多种金属联合在一起)</li></ul></li><li>rally v. 集合起来;n. 大型公共集会<ul><li>r(e)-: again(向后再来一次)</li></ul></li></ul><h3 id="alt-other-其他的"><a href="#alt-other-其他的" class="headerlink" title="alt = other 其他的"></a>alt = other 其他的</h3><ul><li>alter v. 改变<ul><li>改变了很多,变成其他的东西</li></ul></li><li>alternate 间隔的;交替的</li><li>alternative 可代替其他事物的;其他的</li><li>alien 外星人;陌生的</li><li>alienate v. 使某人疏远</li></ul><h3 id="amb-to-walk-to-go"><a href="#amb-to-walk-to-go" class="headerlink" title="amb = to walk, to go"></a>amb = to walk, to go</h3><ul><li>ambulance 救护车<ul><li>谐音： 俺不能死</li></ul></li><li>ambassador 大使<ul><li>走在两个国家之间的人</li></ul></li><li>embassy 大使馆</li><li>ambiguous 不明确的;模棱两可的<ul><li>-ous：形容词;</li><li>ambiguity: n. 模棱两可</li></ul></li></ul><h3 id="lyz-lys-to-loosen"><a href="#lyz-lys-to-loosen" class="headerlink" title="lyz, lys = to loosen"></a>lyz, lys = to loosen</h3><ul><li>analyse v. 分析<ul><li>ana-: up, back, again (可忽略这个前缀)</li><li>分开/松开，然后剖析</li><li>analysis n. 分析<ul><li>-sis的复数: -ses</li></ul></li><li>analytical adj. 分析的;缜密的</li></ul></li><li>paralyze 使瘫痪<ul><li>个体分散开而瘫痪了</li></ul></li></ul><h3 id="anc-ante-before"><a href="#anc-ante-before" class="headerlink" title="anc, ante = before"></a>anc, ante = before</h3><ul><li>ancient 古老的</li><li>ancestor 祖先</li><li>anticipate v. 预料<ul><li>anticipation n. 预料</li><li>unanticipated adj. 未料到的</li></ul></li><li>antique adj. 古董的 n. 古董</li></ul><h3 id="apply-申请-应用-贴-涂"><a href="#apply-申请-应用-贴-涂" class="headerlink" title="apply = 申请, 应用, 贴/涂"></a>apply = 申请, 应用, 贴/涂</h3><ul><li>apply v. 申请;应用</li><li>applicant n. 申请人</li><li>application n. 申请;应用；应用程序</li><li>appliance 家用电器</li><li>applicable 可适用的</li><li>applied 应用的</li></ul><h3 id="proxim-near"><a href="#proxim-near" class="headerlink" title="proxim = near"></a>proxim = near</h3><ul><li>approach 走进,靠近</li><li>approximate adj. 大约的,大概的;v. 接近<ul><li>approximately adv. 大约地 = about</li></ul></li><li>proximity n. 临近</li></ul><h3 id="blind-失明的"><a href="#blind-失明的" class="headerlink" title="blind 失明的"></a>blind 失明的</h3><ul><li>blend 融合,揉合<br>  失明了把东西都混合在一起</li><li>blunder 错误<br>  失明了做错事情</li></ul><h3 id="anim-life-mind"><a href="#anim-life-mind" class="headerlink" title="anim = life, mind"></a>anim = life, mind</h3><ul><li>animation n. 动画<br>  会动的漫画</li><li>animate 活的;有生命的<ul><li>anim: life</li><li>animated 活跃的;活泼的</li></ul></li><li>unanimous adj. 一致通过的,没有异议的<ul><li>un(i): one<ul><li>uniform 制服</li></ul></li><li>anim: mind</li><li>-ous: 形容词</li></ul></li></ul><h3 id="art-艺术-人工-技术"><a href="#art-艺术-人工-技术" class="headerlink" title="art = 艺术,人工,技术"></a>art = 艺术,人工,技术</h3><ul><li>artifical 人工的,仿真的;做作的,虚荣的</li><li>artful 狡猾的<ul><li>有很多的技巧/算计</li><li>artless 天真的</li></ul></li><li>craft 手工业;手艺,工艺;船舶<ul><li>handicraft 手工艺品</li><li>aircraft 飞行棋</li><li>spacecraft 宇宙飞船</li></ul></li></ul><h3 id="sist-stand-站立-存在"><a href="#sist-stand-站立-存在" class="headerlink" title="sist = stand 站立,存在"></a>sist = stand 站立,存在</h3><ul><li>persist v. 坚持<ul><li>per-: intensive 密集的</li></ul></li><li>resist v. 抵制,阻止;抵抗,反抗;忍住,抵挡<ul><li>re-: back, against</li><li>resistant adj. 抵抗的</li></ul></li><li>assist 帮助<ul><li>ad-: to, intensive</li><li>站在旁边(随时给予帮助)</li><li>assistant 助手,助理</li></ul></li><li>consist v. 组成,构成<ul><li>consistent: 一贯的,一致的</li><li>consistency n. 一致</li><li>inconsistency n. 反复无常;不一致</li></ul></li><li>exist<ul><li>ex-: out</li><li>x(=s)ist: stand</li></ul></li><li>coexistence n. 共存,共处<ul><li>co-: 一起</li></ul></li><li>subsist v. 维持生活<ul><li>sub-: under, blow</li><li>在底层存在</li></ul></li><li>insist v. 坚称<ul><li>in-: on, continue</li><li>继续存在</li><li>insistent adj. 坚持的</li></ul></li></ul><h3 id="sphere-n-球形-球体-领域"><a href="#sphere-n-球形-球体-领域" class="headerlink" title="sphere n. 球形,球体;领域"></a>sphere n. 球形,球体;领域</h3><ul><li>hemisphere 半球</li><li>atmosphere 大气层;气氛,情绪<ul><li>atmospheric 大气的,大气层的;制造气氛的</li></ul></li></ul><h3 id="able-有能力的"><a href="#able-有能力的" class="headerlink" title="able 有能力的"></a>able 有能力的</h3><ul><li>disable v. 使某人失去能力<ul><li>dis-: not</li><li>disabled adj. 残废的</li></ul></li><li>enable v. 使某人能够做某事;使某事成为可能</li></ul><h3 id="attend-v-参加-出席"><a href="#attend-v-参加-出席" class="headerlink" title="attend v. 参加,出席"></a>attend v. 参加,出席</h3><ul><li>attendance n. 出席人数;出席</li><li>attendant n. 侍者,服务员</li></ul><h3 id="August-n-八月-奥古斯都-庄严-伟大"><a href="#August-n-八月-奥古斯都-庄严-伟大" class="headerlink" title="August n. 八月,奥古斯都(庄严,伟大)"></a>August n. 八月,奥古斯都(庄严,伟大)</h3><ul><li>inaugurate 为…举行典礼/落成仪式<ul><li>augu: 庄严</li></ul></li><li>auction 拍卖会<ul><li>伟大引申为慢慢地增大,即拍卖价格增大</li></ul></li><li>augment n. 增加;提高;增强;v. 增加;提高;增强</li></ul><h3 id="author-n-作家-创造者"><a href="#author-n-作家-创造者" class="headerlink" title="author n. 作家;创造者"></a>author n. 作家;创造者</h3><ul><li>authority n. 权力;权威<ul><li>创造者被赋予最高权力</li></ul></li><li>authorize v. 授权,批准,许可</li><li>authoritative adj. 权威性的</li><li>authentic adj. 真正的;真品的;真迹的</li></ul><h3 id="auto-self"><a href="#auto-self" class="headerlink" title="auto = self"></a>auto = self</h3><ul><li>auto 汽车<ul><li>automobile 汽车</li></ul></li><li>automatic 自动的<ul><li>automate v. 使…自动化</li><li>autonomous adj. 自治的<ul><li>-nom: law</li><li>autonomy n. 自治</li></ul></li></ul></li></ul><h3 id="avoid-避开"><a href="#avoid-避开" class="headerlink" title="avoid 避开"></a>avoid 避开</h3><ul><li>void n. 空白</li><li>devoid adj. 毫无某物的</li></ul><h3 id="band-乐队-圈-带-箍"><a href="#band-乐队-圈-带-箍" class="headerlink" title="band 乐队;圈,带,箍"></a>band 乐队;圈,带,箍</h3><ul><li>bandage 绷带</li><li>belt 皮带</li><li>broadband 宽带/网络</li><li>bind v. 捆,绑<ul><li>bundle 捆,把,扎</li></ul></li><li>bond 纽带</li><li>binder 活页夹<ul><li>捆绑(bind)的工具</li></ul></li><li>ribbon 丝带,绸带</li><li>bound adj. 很可能会;v. 跳<ul><li>rebound v. 反弹</li></ul></li><li>boundary 边境,分界线</li></ul><h3 id="bar-酒吧-长木条"><a href="#bar-酒吧-长木条" class="headerlink" title="bar 酒吧;长木条"></a>bar 酒吧;长木条</h3><ul><li>barrel 木桶</li><li>barrier 堡垒</li><li>embarrass v. 使尴尬<ul><li>-em: 在…里面</li><li>陷入困境中</li><li>embarrassing 令人尴尬的</li><li>embarrassed 感到尴尬的</li></ul></li></ul><h3 id="bat-战争"><a href="#bat-战争" class="headerlink" title="bat = 战争"></a>bat = 战争</h3><ul><li>battalion n. 营</li><li>bat n. 球棒;蝙蝠</li><li>batter v. 殴打;n. 面糊;v. 打面糊</li><li>battery 电池</li><li>combat v. 格斗<ul><li>com-: 一起</li><li>一起打架</li></ul></li></ul><h3 id="fore-时间或位置-前面"><a href="#fore-时间或位置-前面" class="headerlink" title="fore = (时间或位置)前面"></a>fore = (时间或位置)前面</h3><ul><li>foreword 预言</li><li>former 从前的</li><li>foremost 最著名的;最重要的;最好的;主要的<ul><li>最前面的</li></ul></li><li>forecast n./v. 预测,预报<ul><li>cast 扔</li><li>扔东西之前先预判</li></ul></li><li>foresee 预见;预知;预料</li><li>forward 向前的;位于前面的<ul><li>backward 向后的</li></ul></li><li>forth 等等;向外<ul><li>and so forth = etc 等等</li></ul></li><li>forthcoming 即将发生的<ul><li>前方正在过来的</li></ul></li><li>henceforth adv. 从今以后</li><li>straightforward adj. 简单的,易懂的</li></ul><h3 id="behind-后面的"><a href="#behind-后面的" class="headerlink" title="behind 后面的"></a>behind 后面的</h3><ul><li>hind 后面的</li><li>hinder v. 阻碍</li></ul><h3 id="cycle-v-骑自行车-n-循环"><a href="#cycle-v-骑自行车-n-循环" class="headerlink" title="cycle v.骑自行车;n. 循环"></a>cycle v.骑自行车;n. 循环</h3><ul><li>recycle v. 回收利用<ul><li>recyclable adj. 可回收利用的</li><li>encyclopedia n. 百科全书<ul><li>-pedia: 百科 Wikipedia n. 维基百科</li><li>en-: 使得</li><li>cyclo-: 圆,即全面的</li><li>使得知识点全面覆盖的百科全书</li></ul></li><li>cylinder 圆柱体;汽缸<ul><li>cone 圆锥体</li><li>pyramid 金字塔;椎体</li></ul></li></ul></li></ul><h3 id="bio-生命"><a href="#bio-生命" class="headerlink" title="bio = 生命"></a>bio = 生命</h3><ul><li>biology 生物学</li><li>biochemistry 生物化学</li><li>antibiotic 抗生素<ul><li>anti-: against 反对;抵抗</li><li>biography 传记<ul><li>autobiography 自传</li></ul></li></ul></li></ul><h3 id="blow-v-吹-炸掉"><a href="#blow-v-吹-炸掉" class="headerlink" title="blow v. 吹;炸掉"></a>blow v. 吹;炸掉</h3><ul><li>blaze n. 火焰;火灾;v. 熊熊燃烧;发强光</li><li>bloom n. 花朵;v. 盛开<ul><li>blossom = bloom</li></ul></li></ul><h3 id="break-v-打破-折断-n-休息"><a href="#break-v-打破-折断-n-休息" class="headerlink" title="break v. 打破;折断;n.  休息"></a>break v. 打破;折断;n.  休息</h3><ul><li>break up v. 破裂</li><li>breakup n. 破裂</li><li>breakage n. 损坏<ul><li>-age: 名词</li></ul></li><li>breakdown n. 机械故障;精神的崩溃</li><li>breakthrough n. 突破</li><li>outbreak n. 爆发</li><li>brake n. 刹车</li><li>breach n. 违背</li></ul><h3 id="brief-adj-短暂的-v-简短说明"><a href="#brief-adj-短暂的-v-简短说明" class="headerlink" title="brief adj. 短暂的;v. 简短说明"></a>brief adj. 短暂的;v. 简短说明</h3><ul><li>briefing n. 简要指示</li><li>abbreviate v. 缩略<ul><li>abbreviation n. 缩写</li></ul></li><li>brevity n. 简洁;短暂</li></ul><h3 id="bump-v-猛碰-拟声词-颠簸而行-n-隆起-凸块"><a href="#bump-v-猛碰-拟声词-颠簸而行-n-隆起-凸块" class="headerlink" title="bump v. 猛碰 (拟声词);颠簸而行 n. 隆起,凸块"></a>bump v. 猛碰 (拟声词);颠簸而行 n. 隆起,凸块</h3><ul><li>dump n. 垃圾场;v. 丢弃<ul><li>dumpling 汤圆</li></ul></li><li>hump n. 巨大鼓包</li><li>lump  n. 块;肿块</li><li>plump adj. 微胖的</li><li>stump n. 树桩</li></ul><h3 id="bureau-n-办公桌-局"><a href="#bureau-n-办公桌-局" class="headerlink" title="bureau n. 办公桌;局"></a>bureau n. 办公桌;局</h3><ul><li>bureaucrat n. 官员<ul><li>bureaucratic adj. 官僚的</li><li>bureaucracy n. 官僚主义</li></ul></li></ul><h3 id="calc-石头"><a href="#calc-石头" class="headerlink" title="calc = 石头"></a>calc = 石头</h3><ul><li>calculator n. 计算器</li><li>calculate v. 计算<ul><li>calculation n. 计算</li></ul></li><li>calculus n. 微积分</li><li>calcium n. 钙<ul><li>-ium: 金属<ul><li>radium 铝</li><li>uranium 铀</li></ul></li></ul></li><li>calendar n. 日历</li></ul><h3 id="call-n-呼喊"><a href="#call-n-呼喊" class="headerlink" title="call n. 呼喊"></a>call n. 呼喊</h3><ul><li>calling n. 职业;使命</li><li>recall v. 回忆起</li><li>so-called adj. 所谓的</li><li>reconcile v. 和好<ul><li>re-: 向后</li><li>con: 一起</li><li>-cile: 呼喊</li><li>把双方一起叫回来</li><li>reconciliation n. 思想的一致</li><li>council n. 会议<ul><li>councillor 市议员</li></ul></li><li>counsel n. 劝告<ul><li>记忆: s = suggest 建议</li></ul></li><li>consult v. 咨询<ul><li>consultant 顾问</li><li>consultancy 咨询公司</li><li>consultative 咨询的</li></ul></li></ul></li></ul><h3 id="camp-营地"><a href="#camp-营地" class="headerlink" title="camp 营地"></a>camp 营地</h3><ul><li>campaign n. 运动</li><li>champion n. 冠军;v. 支持…而进行战斗</li><li>champagne 香槟</li></ul><h3 id="cane-n-茎"><a href="#cane-n-茎" class="headerlink" title="cane n. 茎"></a>cane n. 茎</h3><ul><li>candy n. 糖</li><li>canoe n. 独木舟</li><li>cannon n. 大炮</li></ul><h3 id="cap-head-catch-hold"><a href="#cap-head-catch-hold" class="headerlink" title="cap = head, catch, hold"></a>cap = head, catch, hold</h3><ul><li>capital 首都;资金;大写字母</li><li>cape n. 海角;披肩</li><li>caption n. 标题;说明文字</li><li>escape v. (成功)逃跑<ul><li>flee 逃跑(未必成功)</li></ul></li><li>capture v. 抓住</li><li>captive 被监禁的</li><li>capacity n. 容量</li><li>capsule 胶囊;太空舱</li><li>cabin 小木屋<ul><li>cabinet 储藏柜<ul><li>-et: 小</li></ul></li></ul></li><li>cable 电缆</li></ul><h3 id="car-char-车"><a href="#car-char-车" class="headerlink" title="car, char = 车"></a>car, char = 车</h3><ul><li>carpenter 木匠</li><li>cart 推车;马车</li><li>van 小型货车</li><li>cargo 货物</li><li>charge v. 收费;开价;指控;指责;充电n. 主管<ul><li>discharge v. 卸货;排放</li></ul></li></ul><h3 id="care-char-cher-关心"><a href="#care-char-cher-关心" class="headerlink" title="care, char, cher = 关心"></a>care, char, cher = 关心</h3><ul><li>care n. 照顾<ul><li>caring 关心的</li></ul></li><li>charity 慈善机构<ul><li>charitable 慈善的</li></ul></li><li>cherish v. 重视,珍视</li></ul><h3 id="case-n-容器-箱-包-实例-事例"><a href="#case-n-容器-箱-包-实例-事例" class="headerlink" title="case n. 容器,箱,包;实例,事例"></a>case n. 容器,箱,包;实例,事例</h3><ul><li>briefcase 公文包</li><li>suitcase (旅行用的)手提箱</li><li>cassette 磁带盒</li><li>in case 以防万一</li><li>casual 偶然的;非正式的<ul><li>casualty 伤者;死者;伤亡人数</li></ul></li></ul><h3 id="cast-v-扔-投-浇铸-n-石膏"><a href="#cast-v-扔-投-浇铸-n-石膏" class="headerlink" title="cast v. 扔,投;浇铸;n. 石膏"></a>cast v. 扔,投;浇铸;n. 石膏</h3><ul><li>forecast n. 预测</li><li>broadcast v. 播送<ul><li>broad-: 范围广的</li></ul></li><li>podcast n. 播客(节目)</li></ul><h3 id="cause-n-原因-事业"><a href="#cause-n-原因-事业" class="headerlink" title="cause n. 原因;事业"></a>cause n. 原因;事业</h3><ul><li>accuse v. 指责;控告<ul><li>ac(d)-: 朝着</li><li>朝着某人要原因 = 指责</li><li>accused 被指控的</li><li>accusation n. 控告;指责</li></ul></li></ul><h3 id="cave-n-洞穴"><a href="#cave-n-洞穴" class="headerlink" title="cave n. 洞穴"></a>cave n. 洞穴</h3><ul><li>cavity n. 腔;洞;窟窿</li><li>concave adj. 凹面的<ul><li>convex adj. 凸面的</li></ul></li><li>excavate v. 发掘</li></ul><h3 id="cell-n-细胞-巢穴"><a href="#cell-n-细胞-巢穴" class="headerlink" title="cell n. 细胞;巢穴"></a>cell n. 细胞;巢穴</h3><ul><li>cellular adj. 细胞的</li><li>seal n. 印章;海豹;v. 封上(信封)</li><li>conceal v. 隐藏</li><li>cellar 地下室</li></ul><h3 id="center-centre-n-中央"><a href="#center-centre-n-中央" class="headerlink" title="center = centre n. 中央"></a>center = centre n. 中央</h3><ul><li>central 中央的</li><li>centralize v. 集权控制<ul><li>decentralized v. 权力下放</li></ul></li><li>concentrate v. 全神贯注<ul><li>concentratio n.</li></ul></li><li>eccentric 怪异的<ul><li>ec-: out</li><li>在中心之外的</li></ul></li></ul><h3 id="certainly-adv-确定"><a href="#certainly-adv-确定" class="headerlink" title="certainly adv. 确定"></a>certainly adv. 确定</h3><ul><li><p>certain n. 确定</p></li><li><p>ascertain v. 查明</p><ul><li>as-: 使得</li></ul></li><li><p>certainly 确定的</p></li><li><p>certificate = certification 证书</p></li><li><p>certify v. 证明</p></li></ul><h3 id="character-n-人物-性格-符号"><a href="#character-n-人物-性格-符号" class="headerlink" title="character n. 人物;性格;符号"></a>character n. 人物;性格;符号</h3><ul><li>characteristic 典型的</li><li>characterize v. 描绘</li></ul><h3 id="circle-n-圆-圈"><a href="#circle-n-圆-圈" class="headerlink" title="circle n. 圆;圈"></a>circle n. 圆;圈</h3><ul><li>circular 圆形的;循环的<ul><li>circulation n. 循环</li></ul></li><li>circuit n. 环形(路线);电路</li><li>circus n. 马戏团</li></ul><h3 id="civil-adj-国民的-文明的"><a href="#civil-adj-国民的-文明的" class="headerlink" title="civil adj. 国民的;文明的"></a>civil adj. 国民的;文明的</h3><ul><li>civilian 百姓</li><li>civic 城市的</li><li>civilization 文明社会</li><li>civilize v. 开化</li></ul><h3 id="claim-to-shout"><a href="#claim-to-shout" class="headerlink" title="claim = to shout"></a>claim = to shout</h3><ul><li>claim v. 声称;断言;主张;要求;索取;认领</li><li>reclaim v. 取回</li><li>exclaim v. 惊叫<ul><li>exclamation n. 感叹</li></ul></li><li>proclamation n. 宣言</li></ul><h3 id="clear-adj-清楚的"><a href="#clear-adj-清楚的" class="headerlink" title="clear adj. 清楚的"></a>clear adj. 清楚的</h3><ul><li>clarify v. 澄清<ul><li>clarification n. 澄清</li><li>clarity n. 清楚</li></ul></li><li>declare v. 正式宣布<ul><li>declaration n. 宣言</li></ul></li></ul><h3 id="cl-抓住"><a href="#cl-抓住" class="headerlink" title="cl = 抓住"></a>cl = 抓住</h3><ul><li>clamp v. 夹紧,固定</li><li>clasp n. 扣子;v. 握紧</li><li>clip 回形针;片段</li><li>cling v. 紧紧抓住</li><li>clutch v. 紧握</li></ul><h3 id="close-adj-遮掩的"><a href="#close-adj-遮掩的" class="headerlink" title="close adj. 遮掩的"></a>close adj. 遮掩的</h3><ul><li>closet 壁橱</li><li>disclose v. 透露,揭露,泄露,公开<ul><li>disclosure n. 公开,透露</li></ul></li><li>enclose v. 将…围起来<ul><li>en-: 使…</li><li>enclosure n. 围地;圈住;附件</li></ul></li><li>include v. 包括<ul><li>clud: to close</li><li>inclusion n. 包括</li><li>inclusive adj. 包括一切的</li><li>exclude v. 不包括<ul><li>exclusion n. 排斥</li><li>exclusive adj. 独享的</li></ul></li><li>conclude v. 完成;断定<ul><li>conclusion n. 结论</li></ul></li><li>preclude v. 阻止,排除</li></ul></li></ul><h3 id="command-v-命令"><a href="#command-v-命令" class="headerlink" title="command v. 命令"></a>command v. 命令</h3><ul><li>commander n. 指挥官</li><li>demand n. 需要,需求<ul><li>de-: 加强语气</li><li>demanding adj. 对他人要求很高的</li></ul></li></ul><h3 id="common-adj-常见的-n-共同之处"><a href="#common-adj-常见的-n-共同之处" class="headerlink" title="common adj. 常见的;n. 共同之处"></a>common adj. 常见的;n. 共同之处</h3><ul><li>commonplace adj. 平常的</li><li>commune n. 公社</li><li>communism n. 共产主义</li><li>capitalism n. 资本主义</li></ul><h3 id="communicate-v-沟通-传染"><a href="#communicate-v-沟通-传染" class="headerlink" title="communicate v. 沟通;传染"></a>communicate v. 沟通;传染</h3><ul><li>communication n. 沟通</li><li>telecommunications n. 电信<ul><li>tele-: 远的</li></ul></li><li>immune adj. 免疫的<ul><li>immunize v. 使免疫</li></ul></li></ul><h3 id="company-n-公司-陪伴"><a href="#company-n-公司-陪伴" class="headerlink" title="company n. 公司;陪伴"></a>company n. 公司;陪伴</h3><ul><li>companion n. 伴侣</li><li>pan 平底锅</li><li>panel n. 嵌板;控制面板;专家组</li></ul><h3 id="hiking-n-远足"><a href="#hiking-n-远足" class="headerlink" title="hiking n. 远足"></a>hiking n. 远足</h3><ul><li>tent 帐篷<ul><li>dent 凹痕<ul><li>dentist 牙医</li></ul></li></ul></li><li>lodge 乡间小屋</li></ul><h3 id="pet-寻找"><a href="#pet-寻找" class="headerlink" title="pet = 寻找"></a>pet = 寻找</h3><ul><li><p>compete v. 竞争</p><ul><li>competition n. 竞争</li><li>competitor n. 对手</li><li>competitive adj. 竞争的;有竞争力的</li><li>competence n. 胜任;能力</li></ul></li><li><p>appetite n. 食欲</p><ul><li>ap-: ad- 朝着</li></ul></li><li><p>appealing adj. 吸引人的</p></li><li><p>petition 请愿书</p><ul><li>petitioner 情愿人</li></ul></li><li><p>impetus n. 动力</p></li><li><p>fierce 凶猛的</p></li></ul><h3 id="compare-v-比较"><a href="#compare-v-比较" class="headerlink" title="compare v. 比较"></a>compare v. 比较</h3><ul><li>comparison n. 比较</li><li>comparable 可比较的</li></ul><h3 id="pel-push-推"><a href="#pel-push-推" class="headerlink" title="pel = push 推"></a>pel = push 推</h3><ul><li>compel v. 强迫<ul><li>compulsion n. 冲动</li><li>compulsory 强迫的</li></ul></li><li>expel v. 开除</li><li>propel v. 推动<ul><li>propeller 推进器</li></ul></li><li>repel v. 排斥<ul><li>re- = again, back</li><li>向后推</li></ul></li><li>impulse n. 冲动</li><li>pulse 脉搏</li></ul><h3 id="spond-spons-to-answer"><a href="#spond-spons-to-answer" class="headerlink" title="spond, spons = to answer"></a>spond, spons = to answer</h3><ul><li><p>respond v. 回应</p><ul><li>向后回答 = 回应</li><li>responsive 反应快的</li><li>unresponsive 反应慢的</li><li>responsible 负有责任的</li></ul></li><li><p>despondent 沮丧的</p><ul><li>de-: down</li><li>低头回应 = 沮丧</li></ul></li><li><p>correspond v. 符合;相一致</p><ul><li><p>一起做出回应</p><p>corresponding 相应的</p></li></ul></li><li><p>sponsor 赞助商</p><ul><li>spontaneous 自发的</li></ul></li></ul><h3 id="action-n-行动"><a href="#action-n-行动" class="headerlink" title="action n. 行动"></a>action n. 行动</h3><ul><li>act n. 行为</li><li>active 活跃的;积极的</li><li>activate v. 使…活跃</li><li>transact v. 做(交易)<ul><li>trans-: across</li><li>transaction n. 交易</li></ul></li><li>interact v. 交流<ul><li>inter-: between</li><li>interaction n. 相互影响</li><li>interactive 交互的;合作的</li></ul></li><li>react v. 回应<ul><li>类似respond</li><li>reaction n. 反应</li><li>reactionary n. 反对</li></ul></li><li>enact v. 上演<ul><li>en-: 使得</li></ul></li><li>actual 实际的<ul><li>actuality n. 事实</li></ul></li><li>agency n. 代理;经销<ul><li>agent 代理人</li><li>agenda 议事单</li></ul></li></ul><h3 id="put-计算-思考"><a href="#put-计算-思考" class="headerlink" title="put = 计算,思考"></a>put = 计算,思考</h3><ul><li>computer 计算机<ul><li>microcomputer 微型计算机</li><li>computerize v. 使计算机化</li><li>compute v. 计算</li></ul></li><li>dispute n. 争论<ul><li>双方思考的东西不一样</li></ul></li><li>deputy 代理人</li><li>reputation 名誉</li></ul><h3 id="concern-n-担心-v-关于"><a href="#concern-n-担心-v-关于" class="headerlink" title="concern n. 担心;v. 关于"></a>concern n. 担心;v. 关于</h3><ul><li>concerned 担心的</li><li>concerning n. 关于</li><li>discern v. 觉察出<ul><li>concern = 相关</li><li>discern = 相别</li><li>即觉察出区别</li><li>discerning 有洞察力的</li></ul></li></ul><h3 id="condition-n-条件"><a href="#condition-n-条件" class="headerlink" title="condition n. 条件"></a>condition n. 条件</h3><ul><li>conditional 有条件的</li><li>unconditional 无条件的</li></ul><h3 id="prove-v-证明"><a href="#prove-v-证明" class="headerlink" title="prove v. 证明"></a>prove v. 证明</h3><ul><li>proof 证据</li><li>approve v. 同意;对…表示赞赏</li><li>frown v. 皱眉;不满</li><li>probe 探测器</li></ul><h3 id="fin-end-limit"><a href="#fin-end-limit" class="headerlink" title="fin = end, limit"></a>fin = end, limit</h3><ul><li>infinity n. 无限<ul><li>in-: not</li><li>finite 有限的</li></ul></li><li>confine v. 把…局限于</li><li>define v. 给…下定义<ul><li>de-: down</li><li>向下设置界限 = 下定义</li><li>definition n. 定义</li><li>definite 清楚的</li><li>definitely adv. 清楚地</li><li>definitive 最终的,确定的</li><li>indefinite 无期限的;含糊不清的</li></ul></li></ul><h3 id="flic-打-击"><a href="#flic-打-击" class="headerlink" title="flic = 打(击)"></a>flic = 打(击)</h3><ul><li>conflict n. 冲突</li><li>afflict v. 折磨<ul><li>af- : ad- 朝着</li></ul></li><li>inflict v. 使…遭受</li></ul><h3 id="consider-v-思考"><a href="#consider-v-思考" class="headerlink" title="consider v. 思考"></a>consider v. 思考</h3><ul><li>considering prep. 考虑到…</li><li>considerable 相当大的</li><li>considerate 关切的,考虑周到的</li><li>consideration n. 考虑</li></ul><h3 id="stit-stand"><a href="#stit-stand" class="headerlink" title="stit = stand"></a>stit = stand</h3><ul><li>constitute v. 组成<ul><li>constitution 宪法</li><li>constitutional 合乎宪法的</li></ul></li><li>institute n. 学院<ul><li>institution 机构</li></ul></li><li>substitute 代替者<ul><li>substitution n. 代替</li></ul></li></ul><h3 id="contents-n-目录"><a href="#contents-n-目录" class="headerlink" title="contents n. 目录"></a>contents n. 目录</h3><ul><li>content n. 内容;adj. 满足的</li><li>contented 满足的</li><li>discontent n. 不满足</li></ul><h3 id="tribut-to-give"><a href="#tribut-to-give" class="headerlink" title="tribut = to give"></a>tribut = to give</h3><ul><li>contribute v. 捐赠<ul><li>contribution n. 贡献</li></ul></li><li>tribute n. 表示敬意或称赞的行动,言语或礼物</li><li>attribute v. 把…归因于</li><li>distribute v. 分发<ul><li>dis-: not, away(这里表away)</li><li>distribution n. 分发</li></ul></li></ul><h3 id="corpor-body-个体-集体-尸体"><a href="#corpor-body-个体-集体-尸体" class="headerlink" title="corpor = body 个体/集体,尸体"></a>corpor = body 个体/集体,尸体</h3><ul><li>corporation n. 大型公司</li><li>corporate 公司的</li><li>corpse 尸体</li><li>incorporate v. 并入<ul><li>incorporated 股份有限的</li></ul></li></ul><h3 id="count-v-数数"><a href="#count-v-数数" class="headerlink" title="count v. 数数"></a>count v. 数数</h3><ul><li>countdown n. 倒计时</li><li>account n. 账户;描写<ul><li>accountant 会计</li></ul></li><li>counter n. 柜台;v. 反对<ul><li>counter strike 反恐精英 cs</li></ul></li><li>discount n. 折扣</li><li>recount v. 叙述,描述</li></ul><h3 id="counter-n-柜台-v-反对"><a href="#counter-n-柜台-v-反对" class="headerlink" title="counter n. 柜台;v. 反对"></a>counter n. 柜台;v. 反对</h3><ul><li>counter strike 反恐精英 cs</li><li>counterpart n. 相对应或具有相同功能的人或物</li><li>encounter v. 偶遇</li><li>contradict v. 反驳<ul><li>-dict: speak</li></ul></li><li>controversial adj. 有争议的<ul><li>controversy n. 争议</li></ul></li><li>mediator n. 调解人<ul><li>mediate v. 调解</li></ul></li><li>contrast v. 对比<ul><li>contrary adj. 相反的;n. 反面</li></ul></li></ul><h3 id="cour-cur-to-run"><a href="#cour-cur-to-run" class="headerlink" title="cour(cur) = to run"></a>cour(cur) = to run</h3><ul><li>course n. 过程,时期;课程;航向</li><li>intercourse n. 性交;交流</li><li>occur v. 发生<ul><li>occurrence n. 发生的事</li></ul></li><li>current n. 气流,电流,水流;adj. 当前的<ul><li>currency 货币</li></ul></li><li>concur v. 同意;同时发生</li><li>corridor 走廊</li><li>curriculum 课程</li><li>excursion 短途旅行</li><li>incur v. 招致</li><li>recur v. 再次发生</li></ul><h3 id="court-n-法庭-起诉"><a href="#court-n-法庭-起诉" class="headerlink" title="court n. 法庭;起诉"></a>court n. 法庭;起诉</h3><ul><li>courteous 有礼貌的<ul><li>像法庭里面秩序井然</li><li>courtesy n. 礼貌</li></ul></li></ul><h3 id="cover-v-遮盖"><a href="#cover-v-遮盖" class="headerlink" title="cover v. 遮盖"></a>cover v. 遮盖</h3><ul><li>coverage n. 覆盖范围;新闻报道</li><li>discover v. 发现<ul><li>discovery n. 被发现的事实</li></ul></li><li>uncover v. 移去;发现</li><li>recover v. 康复<ul><li>recovery n. 康复</li></ul></li></ul><h3 id="cr-爬"><a href="#cr-爬" class="headerlink" title="cr = 爬"></a>cr = 爬</h3><ul><li>crab n. 螃蟹</li><li>crawl v. 爬行</li><li>creep v. 悄悄行进</li><li>cripple n. 瘸子</li><li>scramble v. 攀登</li></ul><h3 id="volv-volu-to-turn-转"><a href="#volv-volu-to-turn-转" class="headerlink" title="volv(volu) = to turn 转"></a>volv(volu) = to turn 转</h3><ul><li>revolution n. 革命<ul><li>历史的车轮向后转\</li><li>revolutionary adj. 革命性的</li><li>revolutionize v. 使…革命</li></ul></li><li>evolve v. 进化<ul><li>向前进</li><li>evolution n. 进化</li></ul></li></ul><h3 id="craete-v-创造"><a href="#craete-v-创造" class="headerlink" title="craete v. 创造"></a>craete v. 创造</h3><ul><li>creation n. 创造</li><li>creator n. 创造者<ul><li>Creator 造物主</li></ul></li><li>cerative 创造性的</li><li>creature n. 生物</li><li>recreate v. 再现</li><li>concrete n. 混凝土;adj. 具体的<ul><li>把东西一起混合在一起</li></ul></li><li>discrete 分开的<ul><li>discreet 谨慎的</li><li>区别记忆: 两个e分开与否的区别</li></ul></li></ul><h3 id="credit-card-信用卡"><a href="#credit-card-信用卡" class="headerlink" title="credit card 信用卡"></a>credit card 信用卡</h3><ul><li>credit n. 信贷</li><li>incredible 难以置信的;不可思议的</li><li>credible 可靠的</li></ul><h3 id="crime-n-犯罪活动"><a href="#crime-n-犯罪活动" class="headerlink" title="crime n. 犯罪活动"></a>crime n. 犯罪活动</h3><ul><li>criminal 罪犯</li><li>discriminate v. 歧视<ul><li>不要因为罪犯身份就歧视</li></ul></li><li>ageism n. 对老年人的歧视</li><li>racism n. 种族歧视</li></ul><h3 id="criticize-v-挑剔-批评"><a href="#criticize-v-挑剔-批评" class="headerlink" title="criticize v. 挑剔;批评"></a>criticize v. 挑剔;批评</h3><ul><li>critic 批评者</li><li>criticism n. 评论;批评</li><li>critical 批评的;紧要的,关键的</li><li>criterion n. 标准,尺度</li></ul><h3 id="culture-n-文化-文明"><a href="#culture-n-文化-文明" class="headerlink" title="culture n. 文化,文明"></a>culture n. 文化,文明</h3><ul><li>cultural 文化的</li><li>multicultural 多元文化的<ul><li>multi-: 多种的</li></ul></li><li>cultivate v. 耕作;栽培<ul><li>cultivation n. 耕作</li></ul></li></ul><h3 id="custom-n-风俗-习惯"><a href="#custom-n-风俗-习惯" class="headerlink" title="custom n. 风俗;习惯"></a>custom n. 风俗;习惯</h3><ul><li>accustom v. 使…习惯</li><li>accustomed adj. 习惯于…的</li><li>customary adj. 惯例的</li><li>customes n. 海关;关税</li><li>customer n. 顾客</li><li>costume n. 戏装</li></ul><h3 id="date-n-日期-约会"><a href="#date-n-日期-约会" class="headerlink" title="date n. 日期;约会"></a>date n. 日期;约会</h3><ul><li>outdated adj. 不合时宜的</li><li>up to date adj. 现代的</li><li>update v. 更新</li></ul><h3 id="relation-n-关系"><a href="#relation-n-关系" class="headerlink" title="relation n. 关系"></a>relation n. 关系</h3><ul><li>relationship n. (人与人)关系</li><li>related adj. 有关的</li><li>relative n. 家人;adj. 相对的<ul><li>relatively adv. 相对地</li><li>relativity 相对性</li><li>Relativity 相对论</li></ul></li><li>relevant 切题的</li><li>relevance n. 相关(性)</li></ul><h3 id="decade-n-十年"><a href="#decade-n-十年" class="headerlink" title="decade n. 十年"></a>decade n. 十年</h3><ul><li>decmal 十进制的</li><li>decimal 十进位的</li><li>dean 学院院长</li></ul><h3 id="cid-cis-to-cut-to-kill"><a href="#cid-cis-to-cut-to-kill" class="headerlink" title="cid, cis = to cut, to kill"></a>cid, cis = to cut, to kill</h3><ul><li>pesticide = insecticide 杀虫剂<ul><li>pest 害虫</li></ul></li><li>suicide 自杀</li><li>decide 决定</li><li>decisive 决定性的</li><li>concise 简明的</li><li>precise 精确的</li><li>precision n. 精确性</li></ul><h3 id="defence-n-防御"><a href="#defence-n-防御" class="headerlink" title="defence n. 防御"></a>defence n. 防御</h3><ul><li>fence n. 栅栏;围墙</li><li>defendant 被告</li><li>offend v. 得罪<ul><li>de-: 被动</li><li>of-: 主动</li><li>offense n. 冒犯</li><li>offence 罪行</li><li>offensive 无礼的</li></ul></li><li>fencing n. 击剑</li><li>defender 保卫者</li><li>defensive 防御性的</li></ul><h3 id="dem-people"><a href="#dem-people" class="headerlink" title="dem = people"></a>dem = people</h3><ul><li>democracy n. 民主政体</li><li>democrat 民主人士<ul><li>Democrat 民主党党员</li></ul></li><li>democratic 民主的</li><li>epidemic adj. 流行性的;n. 流行病</li></ul><h3 id="depend-v-依赖"><a href="#depend-v-依赖" class="headerlink" title="depend v. 依赖"></a>depend v. 依赖</h3><ul><li>dependent 依赖的</li><li>independent 独立的<ul><li>independence n. 独立</li></ul></li></ul><h3 id="scrib-p-to-write-to-draw"><a href="#scrib-p-to-write-to-draw" class="headerlink" title="scrib(p) = to write, to draw"></a>scrib(p) = to write, to draw</h3><ul><li>describe v. 描述</li><li>ascribe 把…归因于</li><li>prescribe v. 开药方<ul><li>治病之前写处方</li></ul></li><li>subscribe v. 订阅</li><li>transcribe v. 抄写<ul><li>trans-: across</li></ul></li><li>manuscript 手稿<ul><li>man- = 手</li></ul></li><li>script n. 剧本,脚本</li></ul><h3 id="log-to-speak"><a href="#log-to-speak" class="headerlink" title="log = to speak"></a>log = to speak</h3><ul><li>dialogue n. 对话</li><li>catalogue n. 目录<ul><li>cata- = down</li></ul></li><li>monologue 长篇独白</li><li>prologue 开场白</li></ul><h3 id="dict-to-speak"><a href="#dict-to-speak" class="headerlink" title="dict = to speak"></a>dict = to speak</h3><ul><li>diction 说话的方式</li><li>dictionary 字典</li></ul><h3 id="bene-bon-good-好处-好的"><a href="#bene-bon-good-好处-好的" class="headerlink" title="bene(bon) = good 好处;好的"></a>bene(bon) = good 好处;好的</h3><ul><li>benefit 优势</li><li>bonus 津贴</li></ul><h3 id="diff-差异"><a href="#diff-差异" class="headerlink" title="diff = 差异"></a>diff = 差异</h3><ul><li>different 不同的</li><li>indifferent 不关心的<ul><li>没什么不同的 = 不关心的</li></ul></li></ul><h3 id="rect-straight-直的"><a href="#rect-straight-直的" class="headerlink" title="rect = straight 直的"></a>rect = straight 直的</h3><ul><li>direct 笔直的;坦率的</li><li>rectangle 矩形</li></ul><h3 id="mit-s-to-send"><a href="#mit-s-to-send" class="headerlink" title="mit(s) = to send"></a>mit(s) = to send</h3><ul><li>emit v. 散发</li><li>omit v. 省略</li><li>submit v. 递交</li></ul><h3 id="sting-区分"><a href="#sting-区分" class="headerlink" title="sting = 区分"></a>sting = 区分</h3><ul><li>distinguish v. 区分</li><li>distinct 不同的</li></ul><h3 id="turb-打扰"><a href="#turb-打扰" class="headerlink" title="turb = 打扰"></a>turb = 打扰</h3><ul><li>disturb v. 打扰</li><li>turbine 涡轮机</li></ul><h3 id="doct-to-teach"><a href="#doct-to-teach" class="headerlink" title="doct = to teach"></a>doct = to teach</h3><ul><li>doctrine 教义</li><li>document 文件</li></ul><h3 id="dog-狗"><a href="#dog-狗" class="headerlink" title="dog = 狗"></a>dog = 狗</h3><ul><li>dogged 顽强的</li><li>watchdog 监察人员</li></ul><h3 id="don-w-to-give"><a href="#don-w-to-give" class="headerlink" title="don(w) = to give"></a>don(w) = to give</h3><ul><li>donate v. 捐赠</li><li>endow v. 资助</li></ul><h3 id="double-成双的"><a href="#double-成双的" class="headerlink" title="double 成双的"></a>double 成双的</h3><ul><li>triple 有三部分的</li><li>duplicate v. 复制;adj. 完全一样的</li><li>dual 双的</li></ul><h3 id="doubt-v-怀疑"><a href="#doubt-v-怀疑" class="headerlink" title="doubt v. 怀疑"></a>doubt v. 怀疑</h3><ul><li>doubtful 怀疑的</li><li>dubious 可疑的</li></ul><h3 id="dur-to-last-持续"><a href="#dur-to-last-持续" class="headerlink" title="dur = to last 持续"></a>dur = to last 持续</h3><ul><li>during 在…期间</li><li>durable 耐久的</li><li>endure v. 忍受</li></ul><h3 id="clect-to-choose"><a href="#clect-to-choose" class="headerlink" title="clect = to choose"></a>clect = to choose</h3><ul><li>collect v. 收集</li><li>elite 精英</li></ul><h3 id="emp-imp-帝国"><a href="#emp-imp-帝国" class="headerlink" title="emp(imp) = 帝国"></a>emp(imp) = 帝国</h3><ul><li>empire 帝国</li><li>imperial 帝国的</li></ul><h3 id="equ-相等的"><a href="#equ-相等的" class="headerlink" title="equ = 相等的"></a>equ = 相等的</h3><ul><li>equal 相等的</li><li>equation 等式</li></ul><h3 id="hib-to-hold"><a href="#hib-to-hold" class="headerlink" title="hib = to hold"></a>hib = to hold</h3><ul><li>exhibition 展览馆</li><li>exhibit v. 展览</li></ul><h3 id="it-to-go"><a href="#it-to-go" class="headerlink" title="it = to go"></a>it = to go</h3><ul><li>exit 出口</li><li>initial 最初的</li></ul><h3 id="spect-to-look"><a href="#spect-to-look" class="headerlink" title="spect = to look"></a>spect = to look</h3><ul><li>expect v. 预料</li><li>aspect 方面</li></ul><h3 id="tect-to-cover"><a href="#tect-to-cover" class="headerlink" title="tect = to cover"></a>tect = to cover</h3><ul><li>protect v. 保护</li><li>detect v. 觉察</li></ul><h3 id="flow-流"><a href="#flow-流" class="headerlink" title="flow = 流"></a>flow = 流</h3><ul><li>outflow n. 外流</li><li>overflow v. 溢出</li></ul><p>force = 力量</p><ul><li>enforce v. 执行</li><li>forceful 强有力的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用YoloV4训练Refuge数据集</title>
      <link href="2020/11/26/%E4%BD%BF%E7%94%A8YoloV4%E8%AE%AD%E7%BB%83Refuge%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
      <url>2020/11/26/%E4%BD%BF%E7%94%A8YoloV4%E8%AE%AD%E7%BB%83Refuge%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="使用YoloV4训练Refuge数据集"><a href="#使用YoloV4训练Refuge数据集" class="headerlink" title="使用YoloV4训练Refuge数据集"></a>使用YoloV4训练Refuge数据集</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>为了获得青光眼眼底图的视杯盘区域的裁切图，考虑使用yolov4模型进行训练。</p><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ul><li>数据集：glaucoma\refuge_scale608（图片统一处理为608 * 608 size）<ul><li>Annotation-Training400（分割图的训练集400）<ul><li>Glaucoma（分割图的阳性样本40）</li><li>Non-Glaucoma（分割图的阴性样本360）</li></ul></li><li>REFUGE-Training400（眼底图原图的训练集400）<ul><li>Glaucoma（原图的阳性样本40）</li><li>Non-Glaucoma（原图的阴性样本360）</li></ul></li><li>REFUGE-Validation400（眼底图原图的验证集400）</li><li>REFUGE-Validation400_rename（同上，不过将图片的名称中的’V’去掉，因为训练过程要求将验证集图片名转为int型）</li><li>REFUGE-Validation400-GT（分割图的验证集400）</li></ul></li><li>代码：<a href="https://github.com/Tianxiaomo/pytorch-YOLOv4">Tianxiaomo</a></li><li>框架：Pytorch</li><li>平台：星光超算</li></ul><h2 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h2><h3 id="生成608数据集"><a href="#生成608数据集" class="headerlink" title="生成608数据集"></a>生成608数据集</h3><ul><li>代码</li></ul><h3 id="制作train-txt-amp-val-txt-amp-disc-cup-names-这里仍然命名为coco-names"><a href="#制作train-txt-amp-val-txt-amp-disc-cup-names-这里仍然命名为coco-names" class="headerlink" title="制作train.txt &amp; val.txt &amp; disc_cup.names(这里仍然命名为coco.names)"></a>制作train.txt &amp; val.txt &amp; disc_cup.names(这里仍然命名为coco.names)</h3><ul><li><p>格式</p></li><li><p>图片路径获取</p></li><li><p>通过分割图获得坐标</p></li><li><p>id划分</p></li><li><p>完整代码和演示</p></li></ul><h3 id="模型代码调试修改"><a href="#模型代码调试修改" class="headerlink" title="模型代码调试修改"></a>模型代码调试修改</h3><ul><li>遇到的bug</li></ul><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><ul><li>。。。</li><li>训练可视化</li></ul><h3 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h3><ul><li>随便抽一张图进行验证</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于在星光超算上使用tensorboard可视化训练过程</title>
      <link href="2020/11/26/%E5%85%B3%E4%BA%8E%E5%9C%A8%E6%98%9F%E5%85%89%E8%B6%85%E7%AE%97%E4%B8%8A%E4%BD%BF%E7%94%A8tensorboard%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/"/>
      <url>2020/11/26/%E5%85%B3%E4%BA%8E%E5%9C%A8%E6%98%9F%E5%85%89%E8%B6%85%E7%AE%97%E4%B8%8A%E4%BD%BF%E7%94%A8tensorboard%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="关于在星光超算上使用tensorboard可视化训练过程"><a href="#关于在星光超算上使用tensorboard可视化训练过程" class="headerlink" title="关于在星光超算上使用tensorboard可视化训练过程"></a>关于在星光超算上使用tensorboard可视化训练过程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事实上，星光超算上已经提供了时刻运行着的tensorboard窗口，但是不显示任何训练数据，我也不知道怎么从正在运行的tensorboard上再导入数据，以至于我每次在终端运行tensorboard命令，并使用相应提供的8888端口，都会报错说端口已经被占用，故采用建立新的访问入口监视自定义端口来实现tensorboard的使用</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>建立新的访问入口<img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%85%B3%E4%BA%8E%E5%9C%A8%E6%98%9F%E5%85%89%E8%B6%85%E7%AE%97%E4%B8%8A%E4%BD%BF%E7%94%A8tensorboard%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/1.png"></li><li>设置自定义端口<img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%85%B3%E4%BA%8E%E5%9C%A8%E6%98%9F%E5%85%89%E8%B6%85%E7%AE%97%E4%B8%8A%E4%BD%BF%E7%94%A8tensorboard%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/2.png"></li><li>刷新作业页面至出现新入口图标</li><li>在超算终端上运行tensorboad：<code>tensorboard --logdir log --port 1234</code>不需要写入host参数，端口对应即可<img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%85%B3%E4%BA%8E%E5%9C%A8%E6%98%9F%E5%85%89%E8%B6%85%E7%AE%97%E4%B8%8A%E4%BD%BF%E7%94%A8tensorboard%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/3.png"></li><li>运行成功后，即可进入新的入口查看即时训练情况<img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%85%B3%E4%BA%8E%E5%9C%A8%E6%98%9F%E5%85%89%E8%B6%85%E7%AE%97%E4%B8%8A%E4%BD%BF%E7%94%A8tensorboard%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/4.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch实现LeNet的Mnist手写数字识别</title>
      <link href="2020/10/31/Pytorch%E5%AE%9E%E7%8E%B0LeNet%E7%9A%84Mnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>2020/10/31/Pytorch%E5%AE%9E%E7%8E%B0LeNet%E7%9A%84Mnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch实现LeNet的Mnist手写数字识别"><a href="#Pytorch实现LeNet的Mnist手写数字识别" class="headerlink" title="Pytorch实现LeNet的Mnist手写数字识别"></a>Pytorch实现LeNet的Mnist手写数字识别</h1><h2 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h2><ul><li>LeNet是最原始的卷积神经网络（RNN），具体可看<a href="https://www.cnblogs.com/guoyaohua/p/8534077.html">传送门</a>如下代码是基于此多添加了激活函数层</li></ul><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><ul><li>源地址：<a href="https://github.com/L1aoXingyu/pytorch-beginner/blob/master/04-Convolutional%20Neural%20Network/convolution_network.py">传送门</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__author__ = &#x27;SherlockLiao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn, optim</span><br><span class="line"><span class="comment">#import torch.nn.functional as F</span></span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="comment">#from logger import Logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">batch_size = <span class="number">128</span>        <span class="comment"># 批的大小</span></span><br><span class="line">learning_rate = <span class="number">1e-2</span>    <span class="comment"># 学习率 = 0.01</span></span><br><span class="line">num_epoches = <span class="number">20</span>        <span class="comment"># 遍历训练集的次数，batch * batch_size = 数据个数 = 1个epoch的数据个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据类型转换，转换成numpy类型</span></span><br><span class="line"><span class="comment">#def to_np(x):</span></span><br><span class="line"><span class="comment">#    return x.cpu().data.numpy()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载训练集 MNIST 手写数字训练集，如果是本地下载，则将对应的四个数据集压缩包放在./data/MNIST/raw下，无需将download设置为false</span></span><br><span class="line">train_dataset = datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">test_dataset = datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, transform=transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Convolution Network 模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cnn</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_dim, n_class</span>):</span> <span class="comment">#Cnn是自定义类，__init__是创建该类对应的实例时的构造方法，即所要求的传参个数要符合，但self只看作为实例本身，不是参数</span></span><br><span class="line">        super(Cnn, self).__init__()    <span class="comment"># super用法:Cnn继承父类nn.Model的属性，并用父类的方法初始化这些属性</span></span><br><span class="line">        self.conv = nn.Sequential(     <span class="comment">#padding=2保证输入输出尺寸相同(参数依次是:输入深度，输出深度，ksize，步长，填充)</span></span><br><span class="line">            nn.Conv2d(in_dim, <span class="number">6</span>, <span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>), </span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        self.fc = nn.Sequential(<span class="comment">#全连接层</span></span><br><span class="line">            nn.Linear(<span class="number">400</span>, <span class="number">120</span>), </span><br><span class="line">            nn.Linear(<span class="number">120</span>, <span class="number">84</span>), </span><br><span class="line">            nn.Linear(<span class="number">84</span>, n_class))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.conv(x)</span><br><span class="line">        out = out.view(out.size(<span class="number">0</span>), <span class="number">-1</span>)</span><br><span class="line">        out = self.fc(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = Cnn(<span class="number">1</span>, <span class="number">10</span>)  <span class="comment"># 图片大小是28x28,输入深度是1，最终输出的10类</span></span><br><span class="line">use_gpu = torch.cuda.is_available()  <span class="comment"># 判断是否有GPU加速</span></span><br><span class="line"><span class="keyword">if</span> use_gpu:</span><br><span class="line">    model = model.cuda()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义loss和optimizer</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment">#logger = Logger(&#x27;./logs&#x27;)</span></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epoches):</span><br><span class="line">    print(<span class="string">&#x27;epoch &#123;&#125;&#x27;</span>.format(epoch + <span class="number">1</span>))      <span class="comment"># .format为输出格式，formet括号里的即为左边花括号的输出</span></span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span> * <span class="number">10</span>)<span class="comment">#10个*</span></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    running_acc = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(train_loader, <span class="number">1</span>):<span class="comment">#enumerate()函数使得i和data自动增长，1是起始下标的位置</span></span><br><span class="line">        img, label = data</span><br><span class="line">        <span class="comment"># cuda</span></span><br><span class="line">        <span class="keyword">if</span> use_gpu:</span><br><span class="line">            img = img.cuda()</span><br><span class="line">            label = label.cuda()</span><br><span class="line">        img = Variable(img)</span><br><span class="line">        label = Variable(label)</span><br><span class="line">        <span class="comment"># 向前传播</span></span><br><span class="line">        out = model(img)</span><br><span class="line">        loss = criterion(out, label)</span><br><span class="line">        running_loss += loss.item() * label.size(<span class="number">0</span>)<span class="comment">#total loss,由于loss是batch取均值的，需要把batch size乘回去</span></span><br><span class="line">        _, pred = torch.max(out, <span class="number">1</span>)<span class="comment">#预测结果</span></span><br><span class="line">        num_correct = (pred == label).sum()<span class="comment">#正确结果个数</span></span><br><span class="line">        accuracy = (pred == label).float().mean()<span class="comment">#正确率</span></span><br><span class="line">        running_acc += num_correct.item()<span class="comment">#正确结果总数</span></span><br><span class="line">        <span class="comment"># 向后传播</span></span><br><span class="line">        optimizer.zero_grad()<span class="comment">#梯度清零，以免影响其他batch</span></span><br><span class="line">        loss.backward()<span class="comment">#后向传播，计算梯度</span></span><br><span class="line">        optimizer.step()<span class="comment">#利用梯度更新W，b参数</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        # ========================= Log ======================</span></span><br><span class="line"><span class="string">        step = epoch * len(train_loader) + i</span></span><br><span class="line"><span class="string">        # (1) Log the scalar values</span></span><br><span class="line"><span class="string">        info = &#123;&#x27;loss&#x27;: loss.data[0], &#x27;accuracy&#x27;: accuracy.data[0]&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        for tag, value in info.items():</span></span><br><span class="line"><span class="string">            logger.scalar_summary(tag, value, step)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # (2) Log values and gradients of the parameters (histogram)</span></span><br><span class="line"><span class="string">        for tag, value in model.named_parameters():</span></span><br><span class="line"><span class="string">            tag = tag.replace(&#x27;.&#x27;, &#x27;/&#x27;)</span></span><br><span class="line"><span class="string">            logger.histo_summary(tag, to_np(value), step)</span></span><br><span class="line"><span class="string">            logger.histo_summary(tag + &#x27;/grad&#x27;, to_np(value.grad), step)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # (3) Log the images</span></span><br><span class="line"><span class="string">        info = &#123;&#x27;images&#x27;: to_np(img.view(-1, 28, 28)[:10])&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        for tag, images in info.items():</span></span><br><span class="line"><span class="string">            logger.image_summary(tag, images, step)</span></span><br><span class="line"><span class="string">        if i % 300 == 0:</span></span><br><span class="line"><span class="string">            print(&#x27;[&#123;&#125;/&#123;&#125;] Loss: &#123;:.6f&#125;, Acc: &#123;:.6f&#125;&#x27;.format(</span></span><br><span class="line"><span class="string">                epoch + 1, num_epoches, running_loss / (batch_size * i),</span></span><br><span class="line"><span class="string">                running_acc / (batch_size * i)))</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 打印训练集一次遍历后的loss和正确率</span></span><br><span class="line">    print(<span class="string">&#x27;Finish &#123;&#125; epoch, Loss: &#123;:.6f&#125;, Acc: &#123;:.6f&#125;&#x27;</span>.format(</span><br><span class="line">        epoch + <span class="number">1</span>, running_loss / (len(train_dataset)), running_acc / (len(train_dataset))))</span><br><span class="line">    model.eval()<span class="comment">#模型测试，训练完train_datasets之后，model要来测试样本了。在model(test_datasets)之前，需要加上model.eval(). 否则的话，有输入数据，即使不训练，它也会改变权值。这是model中含有batch normalization层所带来的的性质。</span></span><br><span class="line">    eval_loss = <span class="number">0</span></span><br><span class="line">    eval_acc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        img, label = data</span><br><span class="line">        <span class="keyword">if</span> use_gpu:</span><br><span class="line">            img = Variable(img, volatile=<span class="literal">True</span>).cuda()</span><br><span class="line">            label = Variable(label, volatile=<span class="literal">True</span>).cuda()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img = Variable(img, volatile=<span class="literal">True</span>)</span><br><span class="line">            label = Variable(label, volatile=<span class="literal">True</span>)<span class="comment">#这里似乎可以省略</span></span><br><span class="line">        out = model(img)<span class="comment">#给模型喂入测试集数据</span></span><br><span class="line">        loss = criterion(out, label)<span class="comment">#计算loss</span></span><br><span class="line">        eval_loss += loss.item() * label.size(<span class="number">0</span>)<span class="comment">#total loss</span></span><br><span class="line">        _, pred = torch.max(out, <span class="number">1</span>)<span class="comment">#预测结果</span></span><br><span class="line">        num_correct = (pred == label).sum()<span class="comment">#正确结果</span></span><br><span class="line">        eval_acc += num_correct.item()<span class="comment">#正确结果总数</span></span><br><span class="line">    <span class="comment"># 打印测试集一次遍历后的loss和正确率</span></span><br><span class="line">    print(<span class="string">&#x27;Test Loss: &#123;:.6f&#125;, Acc: &#123;:.6f&#125;&#x27;</span>.format(eval_loss / (len(</span><br><span class="line">        test_dataset)), eval_acc / (len(test_dataset))))</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">torch.save(model.state_dict(), <span class="string">&#x27;./cnn.pth&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="运行结果（20个epoch）"><a href="#运行结果（20个epoch）" class="headerlink" title="运行结果（20个epoch）"></a>运行结果（20个epoch）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">epoch 1</span><br><span class="line">**********</span><br><span class="line">Finish 1 epoch, loss: -0.997352, Acc: 0.900300</span><br><span class="line">&lt;ipython-input-28-cda7f2146eca&gt;:37: UserWarning: volatile was removed and now has no effect. Use &#96;with torch.no_grad():&#96; instead.</span><br><span class="line">  img &#x3D; Variable(img, volatile &#x3D; True)</span><br><span class="line">&lt;ipython-input-28-cda7f2146eca&gt;:38: UserWarning: volatile was removed and now has no effect. Use &#96;with torch.no_grad():&#96; instead.</span><br><span class="line">  lable &#x3D; Variable(label, volatile &#x3D; True)</span><br><span class="line">Test loss: 0.271873, Acc: 0.920700</span><br><span class="line"></span><br><span class="line">epoch 2</span><br><span class="line">**********</span><br><span class="line">Finish 2 epoch, loss: -0.997997, Acc: 0.924433</span><br><span class="line">Test loss: 0.201884, Acc: 0.941900</span><br><span class="line"></span><br><span class="line">epoch 3</span><br><span class="line">**********</span><br><span class="line">Finish 3 epoch, loss: -0.998402, Acc: 0.939150</span><br><span class="line">Test loss: 0.163267, Acc: 0.953800</span><br><span class="line"></span><br><span class="line">epoch 4</span><br><span class="line">**********</span><br><span class="line">Finish 4 epoch, loss: -0.998680, Acc: 0.950000</span><br><span class="line">Test loss: 0.136975, Acc: 0.960700</span><br><span class="line"></span><br><span class="line">epoch 5</span><br><span class="line">**********</span><br><span class="line">Finish 5 epoch, loss: -0.998869, Acc: 0.956950</span><br><span class="line">Test loss: 0.117690, Acc: 0.963400</span><br><span class="line"></span><br><span class="line">epoch 6</span><br><span class="line">**********</span><br><span class="line">Finish 6 epoch, loss: -0.998997, Acc: 0.961167</span><br><span class="line">Test loss: 0.106402, Acc: 0.968500</span><br><span class="line"></span><br><span class="line">epoch 7</span><br><span class="line">**********</span><br><span class="line">Finish 7 epoch, loss: -0.999089, Acc: 0.965500</span><br><span class="line">Test loss: 0.099607, Acc: 0.970500</span><br><span class="line"></span><br><span class="line">epoch 8</span><br><span class="line">**********</span><br><span class="line">Finish 8 epoch, loss: -0.999162, Acc: 0.967483</span><br><span class="line">Test loss: 0.090661, Acc: 0.972800</span><br><span class="line"></span><br><span class="line">epoch 9</span><br><span class="line">**********</span><br><span class="line">Finish 9 epoch, loss: -0.999220, Acc: 0.970333</span><br><span class="line">Test loss: 0.087340, Acc: 0.972800</span><br><span class="line"></span><br><span class="line">epoch 10</span><br><span class="line">**********</span><br><span class="line">Finish 10 epoch, loss: -0.999263, Acc: 0.971367</span><br><span class="line">Test loss: 0.082082, Acc: 0.974500</span><br><span class="line"></span><br><span class="line">epoch 11</span><br><span class="line">**********</span><br><span class="line">Finish 11 epoch, loss: -0.999298, Acc: 0.973033</span><br><span class="line">Test loss: 0.075118, Acc: 0.975000</span><br><span class="line"></span><br><span class="line">epoch 12</span><br><span class="line">**********</span><br><span class="line">Finish 12 epoch, loss: -0.999331, Acc: 0.974167</span><br><span class="line">Test loss: 0.075354, Acc: 0.977000</span><br><span class="line"></span><br><span class="line">epoch 13</span><br><span class="line">**********</span><br><span class="line">Finish 13 epoch, loss: -0.999364, Acc: 0.975367</span><br><span class="line">Test loss: 0.071598, Acc: 0.977900</span><br><span class="line"></span><br><span class="line">epoch 14</span><br><span class="line">**********</span><br><span class="line">Finish 14 epoch, loss: -0.999387, Acc: 0.975900</span><br><span class="line">Test loss: 0.068755, Acc: 0.977100</span><br><span class="line"></span><br><span class="line">epoch 15</span><br><span class="line">**********</span><br><span class="line">Finish 15 epoch, loss: -0.999411, Acc: 0.977017</span><br><span class="line">Test loss: 0.064214, Acc: 0.980200</span><br><span class="line"></span><br><span class="line">epoch 16</span><br><span class="line">**********</span><br><span class="line">Finish 16 epoch, loss: -0.999432, Acc: 0.978300</span><br><span class="line">Test loss: 0.063629, Acc: 0.979000</span><br><span class="line"></span><br><span class="line">epoch 17</span><br><span class="line">**********</span><br><span class="line">Finish 17 epoch, loss: -0.999450, Acc: 0.978883</span><br><span class="line">Test loss: 0.059516, Acc: 0.980300</span><br><span class="line"></span><br><span class="line">epoch 18</span><br><span class="line">**********</span><br><span class="line">Finish 18 epoch, loss: -0.999466, Acc: 0.979183</span><br><span class="line">Test loss: 0.063360, Acc: 0.978200</span><br><span class="line"></span><br><span class="line">epoch 19</span><br><span class="line">**********</span><br><span class="line">Finish 19 epoch, loss: -0.999483, Acc: 0.979750</span><br><span class="line">Test loss: 0.061573, Acc: 0.980200</span><br><span class="line"></span><br><span class="line">epoch 20</span><br><span class="line">**********</span><br><span class="line">Finish 20 epoch, loss: -0.999501, Acc: 0.980917</span><br><span class="line">Test loss: 0.059462, Acc: 0.980900</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十一届蓝桥杯省赛Java大学B组（第一场）</title>
      <link href="2020/10/31/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BJava%E5%A4%A7%E5%AD%A6B%E7%BB%84%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/"/>
      <url>2020/10/31/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BJava%E5%A4%A7%E5%AD%A6B%E7%BB%84%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="第十一届蓝桥杯省赛Java大学B组（第一场）"><a href="#第十一届蓝桥杯省赛Java大学B组（第一场）" class="headerlink" title="第十一届蓝桥杯省赛Java大学B组（第一场）"></a>第十一届蓝桥杯省赛Java大学B组（第一场）</h1><h2 id="试题-A：解密"><a href="#试题-A：解密" class="headerlink" title="试题 A：解密"></a>试题 A：解密</h2><p><img src="https://img-blog.csdnimg.cn/2020100517452138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvQUNNX0lDUEM=,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YeRikGSunlRzgDlvRwYkXkrGWWhXaA</span><br></pre></td></tr></table></figure><h2 id="试题B-：纪念日"><a href="#试题B-：纪念日" class="headerlink" title="试题B ：纪念日"></a>试题B ：纪念日</h2><p><img src="https://img-blog.csdnimg.cn/20201005175246982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvQUNNX0lDUEM=,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY-MM-DD HH:MM:SS&quot;</span>); <span class="comment">//格式大小写任意</span></span><br><span class="line">        Date begin = (Date)sdf.parse(<span class="string">&quot;1921-7-23 12:00:00&quot;</span>);</span><br><span class="line">        Date end = (Date)sdf.parse(<span class="string">&quot;2020-7-1 12:00:00&quot;</span>);</span><br><span class="line">        <span class="comment">//getTime() 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。 </span></span><br><span class="line">        <span class="keyword">long</span> ans = end.getTime() - begin.getTime();</span><br><span class="line">        System.out.println(ans / <span class="number">60000</span>); <span class="comment">//60000毫秒 = 1分钟</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试题C：合并检测"><a href="#试题C：合并检测" class="headerlink" title="试题C：合并检测"></a>试题C：合并检测</h2><p><img src="https://img-blog.csdnimg.cn/20201005175346871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvQUNNX0lDUEM=,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123; <span class="comment">//从1枚举到10000</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">double</span> num;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum % i == <span class="number">0</span>) <span class="comment">//k值为偶数</span></span><br><span class="line">                num = sum / i + sum * <span class="number">0.01</span> * i;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//k值为奇数</span></span><br><span class="line">                num = sum / i + sum * <span class="number">0.01</span> * i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(num &lt; ans)&#123; <span class="comment">//更新最小总试剂盒数ans和最优单组个数res</span></span><br><span class="line">                ans = num;</span><br><span class="line">                res = i;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;ans = &quot; + ans);</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;res = &quot; + res);</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试题D：分配口罩"><a href="#试题D：分配口罩" class="headerlink" title="试题D：分配口罩"></a>试题D：分配口罩</h2><p><img src="https://img-blog.csdnimg.cn/20201005175429317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvQUNNX0lDUEM=,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9090400</span>, <span class="number">8499400</span>, <span class="number">5926800</span>,</span><br><span class="line">            <span class="number">8547000</span>, <span class="number">4958200</span>, <span class="number">4422600</span>, <span class="number">5751200</span>, <span class="number">4175600</span>, <span class="number">6309600</span>,</span><br><span class="line">            <span class="number">5865200</span>, <span class="number">6604400</span>, <span class="number">4635000</span>, <span class="number">10663400</span>, <span class="number">8087200</span>, <span class="number">4554000</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>; <span class="comment">//INF</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> sub)</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;x &quot; + x + &quot; &quot; + y + &quot; &quot; + sub);</span></span><br><span class="line">        <span class="keyword">if</span>(x + y == <span class="number">15</span>)&#123; <span class="comment">//当前已经考虑过的批次等于总批次</span></span><br><span class="line">            ans = Math.min(ans,Math.abs(sub));  <span class="comment">//更新最小差值</span></span><br><span class="line">            <span class="comment">//System.out.println(&quot;ans = &quot; + ans);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//返回上一种方案并继续递归</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//差值sub默认按第一所医院减去第二所医院</span></span><br><span class="line">        <span class="keyword">int</span> now = sub;</span><br><span class="line">        dfs(x + <span class="number">1</span>,y,now + arr[x + y]); <span class="comment">//当前批次考虑给第一所医院，差值变大</span></span><br><span class="line">        dfs(x,y + <span class="number">1</span>,now - arr[x + y]); <span class="comment">//当前批次考虑给第二所医院，差值变小</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//返回上一种方案并继续递归</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> s1,<span class="keyword">int</span> s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u == arr.length)&#123; <span class="comment">//当前已分配的批次等于总批次</span></span><br><span class="line">            ans = Math.min(ans,Math.abs(s1 - s2)); <span class="comment">////更新最小差值</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs2(u + <span class="number">1</span>,s1 + arr[u],s2); <span class="comment">//当前考虑的批次分配给第一所医院</span></span><br><span class="line">        dfs2(u + <span class="number">1</span>,s1,s2 + arr[u]); <span class="comment">//当前考虑的批次分配给第二所医院</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(dfs(0,0,0));</span></span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">//当前第一所医院有0批，第二所医院有0批，两者口罩数量差为0</span></span><br><span class="line">        <span class="comment">//dfs2(0,0,0); //当前已分配0批口罩，第一所医院有0个口罩，第二所医院有0个口罩</span></span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试题E：斐波那契数列最大公约数"><a href="#试题E：斐波那契数列最大公约数" class="headerlink" title="试题E：斐波那契数列最大公约数"></a>试题E：斐波那契数列最大公约数</h2><p><img src="https://img-blog.csdnimg.cn/20201005175607714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvQUNNX0lDUEM=,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> BigInteger INF = <span class="keyword">new</span> BigInteger(<span class="string">&quot;-1&quot;</span>); <span class="comment">//不要设置为正数，因为很有可能刚好有一项会相等</span></span><br><span class="line">    BigInteger[] vis = <span class="keyword">new</span> BigInteger[<span class="number">3000</span>]; <span class="comment">//斐波那契数列记忆数组</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gcd</span><span class="params">(BigInteger a,BigInteger b)</span></span>&#123; <span class="comment">//计算最大公约数</span></span><br><span class="line">        <span class="keyword">if</span>(b.equals(BigInteger.ZERO))</span><br><span class="line">            System.out.println(<span class="string">&quot;res = &quot;</span> + a);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            gcd(b,a.mod(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigInteger <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">//计算斐波那契数列</span></span><br><span class="line"><span class="comment">//        System.out.println(n);</span></span><br><span class="line">        <span class="keyword">if</span>(vis[n] != INF) <span class="comment">//已经计算过的数列值直接从数组取</span></span><br><span class="line">            <span class="keyword">return</span> vis[n];</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)  <span class="comment">//fib(1) = fib(2) = 1</span></span><br><span class="line">            <span class="keyword">return</span> BigInteger.ONE;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> vis[n] = fib(n - <span class="number">1</span>).add(fib(n - <span class="number">2</span>)); <span class="comment">//递归并存入数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(vis,INF);</span><br><span class="line">        BigInteger a = fib(<span class="number">2020</span>);</span><br><span class="line">        BigInteger b = fib(<span class="number">520</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b.toString());</span><br><span class="line">        gcd(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试题F：分类计数"><a href="#试题F：分类计数" class="headerlink" title="试题F：分类计数"></a>试题F：分类计数</h2><p><img src="https://img-blog.csdnimg.cn/20201005175635234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvQUNNX0lDUEM=,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> digit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lcase = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ucase = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] arr = sc.nextLine().toCharArray(); <span class="comment">//不能用next()，否则遇到空格就无法读取后面的东西</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(arr[i])) <span class="comment">//数字</span></span><br><span class="line">                digit++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Character.isUpperCase(arr[i])) <span class="comment">//大写字母</span></span><br><span class="line">                ucase++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Character.isLowerCase(arr[i])) <span class="comment">//小写字母</span></span><br><span class="line">                lcase++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ucase + <span class="string">&quot;\n&quot;</span> + lcase + <span class="string">&quot;\n&quot;</span> + digit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试题G：八次求和"><a href="#试题G：八次求和" class="headerlink" title="试题G：八次求和"></a>试题G：八次求和</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithms 4th Reading Notes</title>
      <link href="2020/01/30/Algorithms-4th-Reading-Notes/"/>
      <url>2020/01/30/Algorithms-4th-Reading-Notes/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-1-基础"><a href="#Chapter-1-基础" class="headerlink" title="Chapter 1 基础"></a>Chapter 1 基础</h1><h2 id="基础编程模型"><a href="#基础编程模型" class="headerlink" title="基础编程模型"></a>基础编程模型</h2><h3 id="终端命令详解"><a href="#终端命令详解" class="headerlink" title="终端命令详解"></a>终端命令详解</h3><table><thead><tr><th>命令</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>javac</td><td>.java文件名</td><td>编译java程序</td></tr><tr><td>java</td><td>.class文件名和命令行参数</td><td>运行java程序</td></tr><tr><td>more</td><td>任意文本文件名</td><td>打印文件内容</td></tr></tbody></table><blockquote><p><strong>eg: % java RandomSeq 5 100.0 200.0</strong></p></blockquote><ul><li>%: 提示符</li><li>java: 调用java</li><li>RandomSeq: 调用该类的静态方法</li><li>5: args[0]</li><li>100.0: args[1]</li><li>200.0: args[2]</li></ul><h2 id="Union-Find算法"><a href="#Union-Find算法" class="headerlink" title="Union-Find算法"></a>Union-Find算法</h2><h3 id="动态连通性"><a href="#动态连通性" class="headerlink" title="动态连通性"></a>动态连通性</h3><p><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%8A%A8%E6%80%81%E8%BF%9E%E9%80%9A%E6%80%A7.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%8A%A8%E6%80%81%E8%BF%9E%E9%80%9A%E6%80%A7.webp" alt="动态连通性"></a></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/union-find%E7%AE%97%E6%B3%95API.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/union-find%E7%AE%97%E6%B3%95API.webp" alt="union-find算法API"></a></p><h3 id="Quick-Find"><a href="#Quick-Find" class="headerlink" title="Quick-Find"></a>Quick-Find</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id; <span class="comment">// access to component id (site indexed)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// number of components</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Initialize component id array.</span></span><br><span class="line">count = N;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> count; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> find(p) == find(q); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> id[p]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// 获得p和q的组号</span></span><br><span class="line"><span class="keyword">int</span> pID = find(p);</span><br><span class="line"><span class="keyword">int</span> qID = find(q);</span><br><span class="line"><span class="comment">// 如果两个组号相等，直接返回</span></span><br><span class="line"><span class="keyword">if</span> (pID == qID) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 遍历一次，改变组号使他们属于一个组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line"><span class="keyword">if</span> (id[i] == pID) id[i] = qID;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点：所有的子节点记录的都是其所属树的根节点，当某棵树变成一棵子树之后，其所有的子节点都将逐一遍历替换记录值</li></ul><h3 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick-Union"></a>Quick-Union</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// 寻找p节点所在组的根节点，根节点具有性质id[root] = root</span></span><br><span class="line"><span class="keyword">while</span> (p != id[p]) p = id[p];</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Give p and q the same root.</span></span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">id[pRoot] = qRoot;    <span class="comment">// 将一颗树(即一个组)变成另外一课树(即一个组)的子树</span></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：每个节点的记录值将是所属父节点，解决了Quick-Find算法的不足</li><li>缺点：不同树合并时可能会造成一头轻一头重的“畸形树”</li></ul><h3 id="Weighted-Quick-Union"><a href="#Weighted-Quick-Union" class="headerlink" title="Weighted Quick-Union"></a>Weighted Quick-Union</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">id[i] = i;    <span class="comment">// 每个节点的组号就是该节点的序号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)   <span class="comment">//权重数组</span></span><br><span class="line">sz[i] = <span class="number">1</span>;    <span class="comment">// 初始情况下，每个组的大小都是1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = find(p);</span><br><span class="line"><span class="keyword">int</span> j = find(q);</span><br><span class="line"><span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 将小树作为大树的子树</span></span><br><span class="line"><span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123; id[i] = j; sz[j] += sz[i]; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; id[j] = i; sz[i] += sz[j]; &#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E7%9B%B8%E5%AF%B9%E5%B9%B3%E8%A1%A1%E7%9A%84%E6%A0%91.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E7%9B%B8%E5%AF%B9%E5%B9%B3%E8%A1%A1%E7%9A%84%E6%A0%91.webp" alt="相对平衡的树"></a></p><h3 id="Weighted-Quick-Union-With-Path-Compression"><a href="#Weighted-Quick-Union-With-Path-Compression" class="headerlink" title="Weighted Quick-Union With Path Compression"></a>Weighted Quick-Union With Path Compression</h3><ul><li>上述的算法证明树的理想高度为1，即一棵十分扁平的树，因此可以使用路径压缩的方式进行优化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (p != id[p])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将p节点的父节点设置为它的爷爷节点</span></span><br><span class="line">id[p] = id[id[p]];</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><table><thead><tr><th><strong>Algorithm</strong></th><th><strong>Constructor</strong></th><th><strong>Union</strong></th><th><strong>Find</strong></th></tr></thead><tbody><tr><td><strong>Quick-Find</strong></td><td>N</td><td>N</td><td></td></tr><tr><td><strong>Quick-Union</strong></td><td>N</td><td>Tree height</td><td>Tree height</td></tr><tr><td><strong>Weighted Quick-Union</strong></td><td>N</td><td>lgN</td><td>lgN</td></tr><tr><td><strong>Weighted Quick-Union With Path Compression</strong></td><td>N</td><td>Very near to 1 (amortized)</td><td>Very near to 1 (amortized)</td></tr></tbody></table><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://blog.csdn.net/dm_vincent/article/details/7655764">并查集(Union-Find)算法介绍</a></li></ul><h1 id="Chapter-2-排序"><a href="#Chapter-2-排序" class="headerlink" title="Chapter 2 排序"></a>Chapter 2 排序</h1><h2 id="Selection-选择排序"><a href="#Selection-选择排序" class="headerlink" title="Selection 选择排序"></a>Selection 选择排序</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><ul><li><p>找到数组中的最小元素，然后将它与数组的第一个元素交换位置。然后再从剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (less(a[j], a[min]))</span><br><span class="line">                    min = j;</span><br><span class="line">                exch(a, i, min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            StdOut.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[i], a[i - <span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String[] a = In.readStrings();   方法过时</span></span><br><span class="line">        String[] a = <span class="keyword">new</span> In(<span class="string">&quot;F:\\IntelliJ IDEA 2018.1.4\\my_workspace\\Algorithms_4th\\algs4-data\\tiny.txt&quot;</span>).readAllStrings();</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            assert 断言</span></span><br><span class="line"><span class="comment">            （1）assert [boolean 表达式]</span></span><br><span class="line"><span class="comment">            如果[boolean表达式]为true，则程序继续执行。</span></span><br><span class="line"><span class="comment">            如果为false，则程序抛出AssertionError，并终止执行。</span></span><br><span class="line"><span class="comment">            （2）assert[boolean 表达式 : 错误表达式 （日志）]</span></span><br><span class="line"><span class="comment">            如果[boolean表达式]为true，则程序继续执行。</span></span><br><span class="line"><span class="comment">            如果为false，则程序抛出java.lang.AssertionError，输出[错误信息]。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;   <span class="comment">//检测是否排序正确</span></span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>运行时间和输入无关。为了找出最小的元素而扫描一遍数组并不能为下一遍扫描提供信息</li><li>数据移动是最小的。每次交换都会改变两个数组的元素的值，因此选择排序用了N次交换</li><li>最坏情况时间复杂度 O(n^2)</li><li>最好情况时间复杂度 O(n^2)</li><li>平均情况时间复杂度 O(n^2)<br><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.webp" alt="选择排序"></a></li></ul><h2 id="Insertion-插入排序"><a href="#Insertion-插入排序" class="headerlink" title="Insertion 插入排序"></a>Insertion 插入排序</h2><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><ul><li><p>将一个元素插入到已排序的数组中，使得插入之后的数组也是有序的。插入排序从左到右插入每个元素，每次插入之后左部的子数组是有序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">                exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            StdOut.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[i], a[i - <span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String [] a = <span class="keyword">new</span> In(<span class="string">&quot;F:\\IntelliJ IDEA 2018.1.4\\my_workspace\\Algorithms_4th\\algs4-data\\tiny.txt&quot;</span>).readAllStrings();</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>最坏情况时间复杂度 O(n^2)</li><li>最好情况时间复杂度 O(n)</li><li>平均情况时间复杂度 O(n^2)<br><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.webp" alt="插入排序"></a></li></ul><h2 id="Shell-希尔排序"><a href="#Shell-希尔排序" class="headerlink" title="Shell 希尔排序"></a>Shell 希尔排序</h2><h3 id="思想-2"><a href="#思想-2" class="headerlink" title="思想"></a>思想</h3><ul><li><p>希尔排序的思想是使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。换句话说，一个h有序数组就是h个互相独立的游戏数组编织在一起组成的一个数组。在进行排序是，如果h很大，我们能将元素移动到很远的地方，为实现更小的h有序创造方便。用这种方式，对于任意为1结尾的h序列，我们能够将数组排序，这就是希尔排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (h &lt; N/<span class="number">3</span>)</span><br><span class="line">            h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j], a[j - h]); j -= h) &#123;</span><br><span class="line">                    exch(a, j, j-h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h = h/<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            StdOut.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[i], a[i - <span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String [] a = &#123;<span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>最坏情况时间复杂度 O(n^2)</li><li>最好情况时间复杂度 O(nlogn)</li><li>平均情况时间复杂度 O(n√n)<br><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.webp" alt="希尔排序"></a></li></ul><h2 id="Merge-Top-Down-归并排序-自顶向下"><a href="#Merge-Top-Down-归并排序-自顶向下" class="headerlink" title="Merge Top-Down 归并排序 自顶向下"></a>Merge Top-Down 归并排序 自顶向下</h2><h3 id="思想-3"><a href="#思想-3" class="headerlink" title="思想"></a>思想</h3><ul><li><p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide AND Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTopToDown</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo)/<span class="number">2</span>;</span><br><span class="line">        sort(a, lo, mid);</span><br><span class="line">        sort(a, mid+<span class="number">1</span>, hi);</span><br><span class="line">        merge(a, lo, mid, hi);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi )</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i]))</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            StdOut.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[i], a[i - <span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String [] a = &#123;<span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul><li>最坏情况时间复杂度 O(nlogn) (typical)</li><li>最好情况时间复杂度 O(nlogn)</li><li>平均情况时间复杂度 O(nlogn)<br><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B.webp" alt="归并排序自顶向下"></a></li></ul><h2 id="Merge-Down-Top-归并排序-自底向上"><a href="#Merge-Down-Top-归并排序-自底向上" class="headerlink" title="Merge Down-Top 归并排序 自底向上"></a>Merge Down-Top 归并排序 自底向上</h2><h3 id="思想-4"><a href="#思想-4" class="headerlink" title="思想"></a>思想</h3><ul><li><p>实现归并排序的另一种方法是先归并那些微型数组，然后再成对归并得到的子数组，如此这般，知道我们将整个数组归并在一起。这种方法比标准的递归方法所需要的代码量更少。</p></li><li><p>首先我们两两归并（把每个元素想象成一个大小为1的数组），然后四四归并（将两个大小为2的数组归并成一个有4个元素的数组），然后八八归并，一直下去。在每一轮归并中，最后一次归并的第二个子数组可能比第一个子数组要小（但这对merge()方法不是问题），如果不是的话所有的归并中两个数组大小都应该一样，而在下一轮中子数组的大小会翻倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeDownToTop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz = sz + sz) &#123;<span class="comment">// sz子数组对的大小</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N - sz; lo += sz + sz) &#123; <span class="comment">// lo 子数组的索引</span></span><br><span class="line">                merge(a, lo, lo+sz-<span class="number">1</span>, Math.min(lo+sz+sz-<span class="number">1</span>, N-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi )</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i]))</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            StdOut.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[i], a[i - <span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String [] a = &#123;<span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h3><ul><li>代码量更少<br><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A.webp" alt="归并排序自底向上"></a></li></ul><h2 id="Quick-快速排序"><a href="#Quick-快速排序" class="headerlink" title="Quick 快速排序"></a>Quick 快速排序</h2><h3 id="思想-5"><a href="#思想-5" class="headerlink" title="思想"></a>思想</h3><ul><li>快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。 通过”切分”将数组分成两半 通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        StdRandom.shuffle(a);   <span class="comment">//随机排序数组 原因见 性能特点</span></span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">        sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">        sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = hi+<span class="number">1</span>;<span class="comment">//左右扫描指针</span></span><br><span class="line">        Comparable v = a[lo];<span class="comment">//切分元素</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;   <span class="comment">//扫描左右，检查是否结束并交换元素</span></span><br><span class="line">            <span class="keyword">while</span> (less(a[++i], v)) <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">while</span> (less(v, a[--j])) <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">            exch(a, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        exch(a, lo, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            StdOut.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[i], a[i - <span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String [] a = &#123;<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;U&quot;</span>,<span class="string">&quot;I&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;S&quot;</span>,<span class="string">&quot;O&quot;</span>,<span class="string">&quot;R&quot;</span>,<span class="string">&quot;T&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;P&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;E&quot;</span>&#125;;</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切分函数-partition"><a href="#切分函数-partition" class="headerlink" title="切分函数 partition"></a>切分函数 partition</h3><ul><li>切分能将切分元素放到一个合适的位置，然后再用递归调用将其他位置的元素排序(一般策略是先随意抽取a[lo]当切分元素) 该方法使得数组满足下面三个条件：<ul><li>对于某个j，a[j]已经排定</li><li>a[lo]到a[j-1]中的所有元素都不大于a[j]</li><li>a[j+1]到a[hi]中的所有元素都不小于a[j]。</li></ul></li></ul><p><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%88%87%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE1.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%88%87%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE1.webp" alt="切分示意图1"></a><br><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%88%87%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE2.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%88%87%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE2.webp" alt="切分示意图2"></a></p><h3 id="算法过程图"><a href="#算法过程图" class="headerlink" title="算法过程图"></a>算法过程图</h3><p><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F1.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F1.webp" alt="快速排序1"></a><br><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2.webp" alt="快速排序2"></a></p><h2 id="三向切分快速排序"><a href="#三向切分快速排序" class="headerlink" title="三向切分快速排序"></a>三向切分快速排序</h2><h3 id="思想-6"><a href="#思想-6" class="headerlink" title="思想"></a>思想</h3><ul><li>Dijkstra的算法如 ”三向切分的快速排序算法“ 中极为简洁的切分代码所示。它从左到右遍历数组一次，维护一个指针lt使得a[lo.. lt-1]中的元素都小于v，一个指针gt使得a[gt+1..hi]中的元素都大于v，一个指针i使得a[lt..i-1]中的元素都等于v，a[i..gt]的元素还未确定</li><li>解决数组存在大量重复元素<ul><li>a[i]小于v，将a[lt]和a[i]交换，将lt和i加一</li><li>a[i]大于v，将a[gt]和a[i]交换，将gt减一</li><li>a[i]等于v，将i加一</li></ul></li></ul><p><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E4%B8%89%E5%90%91%E5%88%87%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E4%B8%89%E5%90%91%E5%88%87%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.webp" alt="三向切分示意图"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick2</span> </span>&#123;   <span class="comment">//三向切分快速排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        StdRandom.shuffle(a);</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> lt = lo, i = lo + <span class="number">1</span>, gt = hi;</span><br><span class="line">        Comparable v = a[lo];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line">            <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>) exch(a, lt++, i++);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) exch(a, i, gt--);</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a, lo, lt-<span class="number">1</span>);</span><br><span class="line">        sort(a, gt+<span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            StdOut.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[i], a[i - <span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String [] a = &#123;<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;U&quot;</span>,<span class="string">&quot;I&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;S&quot;</span>,<span class="string">&quot;O&quot;</span>,<span class="string">&quot;R&quot;</span>,<span class="string">&quot;T&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;P&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;E&quot;</span>&#125;;</span><br><span class="line">        sort(a);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a)</span></span>;</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法过程图-1"><a href="#算法过程图-1" class="headerlink" title="算法过程图"></a>算法过程图</h3><p><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E4%B8%89%E5%90%91%E5%88%87%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F1.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E4%B8%89%E5%90%91%E5%88%87%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F1.webp" alt="三向切分快速排序1"></a><br><a href="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E4%B8%89%E5%90%91%E5%88%87%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2.webp"><img src="https://cdn.jsdelivr.net/gh/cansushang/CDN/images/%E4%B8%89%E5%90%91%E5%88%87%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2.webp" alt="三向切分快速排序2"></a></p><h3 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h3><ul><li>最坏情况时间复杂度 O(n^2)</li><li>最好情况时间复杂度 O(nlog2n)</li><li>平均情况时间复杂度 O(nlog2n)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
